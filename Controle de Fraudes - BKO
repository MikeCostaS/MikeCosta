#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>

// Callback para gravar a resposta da API
size_t write_callback(void *ptr, size_t size, size_t nmemb, char *data) {
    strcat(data, (char *)ptr);
    return size * nmemb;
}

// Fun√ß√£o para processar o pagamento
void processarPagamento(const char *numero_cartao, const char *validade, 
                        const char *cvv, double valor) {
    CURL *curl;
    CURLcode res;
    char response[1024] = "";
    char json_data[512];

    // Monta os dados da transa√ß√£o em JSON
    snprintf(json_data, sizeof(json_data),
             "{\"card_number\": \"%s\", \"expiry_date\": \"%s\", \"cvv\": \"%s\", \"amount\": %.2f}",
             numero_cartao, validade, cvv, valor);

    // Inicializa o cURL
    curl = curl_easy_init();
    if (curl) {
        struct curl_slist *headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        headers = curl_slist_append(headers, "Authorization: Bearer SEU_TOKEN_API");

        // Configura√ß√µes da requisi√ß√£o
        curl_easy_setopt(curl, CURLOPT_URL, "https://api.gatewaypagamento.com/v1/process");
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, json_data);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, response);

        // Realiza a requisi√ß√£o POST
        res = curl_easy_perform(curl);

        // Verifica o resultado
        if (res != CURLE_OK) {
            fprintf(stderr, "Erro na requisi√ß√£o: %s\n", curl_easy_strerror(res));
        } else {
            printf("Resposta da API: %s\n", response);
        }

        // Limpeza
        curl_easy_cleanup(curl);
        curl_slist_free_all(headers);
    }
}

int main() {
    char numero_cartao[20];
    char validade[6];
    char cvv[4];
    double valor;

    // Entrada de dados do cart√£o
    printf("N√∫mero do Cart√£o: ");
    scanf("%19s", numero_cartao);
    printf("Validade (MM/AA): ");
    scanf("%5s", validade);
    printf("CVV: ");
    scanf("%3s", cvv);
    printf("Valor da Transa√ß√£o: ");
    scanf("%lf", &valor);

    // Processa o pagamento
    processarPagamento(numero_cartao, validade, cvv, valor);
    return 0;
}
[16:21, 5/9/2025] üé©Mike Costaüéß: #include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LIMITE_VALOR 3000.0
#define LIMITE_TRANSACOES 3
#define LIMITE_LOCAL 2
#define MAX_TRANSACOES 100
#define MAX_LINHA 256

// Estrutura para armazenar a transa√ß√£o
typedef struct {
    char cartao[20];
    double valor;
    char local[50];
    char dataHora[20];
} Transacao;

// Fun√ß√£o para carregar transa√ß√µes do arquivo CSV
int carregarTransacoes(const char *arquivo, Transacao transacoes[]) {
    FILE *file = fopen(arquivo, "r");
    if (!file) {
        perror("Erro ao abrir o arquivo");
        return 0;
    }

    char linha[MAX_LINHA];
    int i = 0;

    // Ignorar o cabe√ßalho
    fgets(linha, sizeof(linha), file);

    while (fgets(linha, sizeof(linha), file) && i < MAX_TRANSACOES) {
        sscanf(linha, "%[^,],%lf,%[^,],%[^\n]",
               transacoes[i].cartao,
               &transacoes[i].valor,
               transacoes[i].local,
               transacoes[i].dataHora);
        i++;
    }

    fclose(file);
    return i;
}

// Fun√ß√£o para detectar fraudes
void detectarFraude(Transacao transacoes[], int total) {
    printf("Transa√ß√µes Suspeitas:\n");

    for (int i = 0; i < total; i++) {
        int suspeito = 0;

        // Verifica√ß√£o 1: Valor muito alto
        if (transacoes[i].valor > LIMITE_VALOR) {
            printf("Transa√ß√£o Suspeita: Valor Alto - Cart√£o: %s | Valor: %.2f\n",
                   transacoes[i].cartao, transacoes[i].valor);
            suspeito = 1;
        }

        // Verifica√ß√£o 2: M√∫ltiplas transa√ß√µes seguidas do mesmo cart√£o
        int contagem = 1;
        for (int j = i + 1; j < total; j++) {
            if (strcmp(transacoes[i].cartao, transacoes[j].cartao) == 0) {
                contagem++;
                if (contagem > LIMITE_TRANSACOES) {
                    printf("Transa√ß√£o Suspeita: M√∫ltiplas Transa√ß√µes - Cart√£o: %s\n", transacoes[i].cartao);
                    suspeito = 1;
                    break;
                }
            }
        }

        // Verifica√ß√£o 3: Mudan√ßa geogr√°fica abrupta
        if (i > 0 && strcmp(transacoes[i].cartao, transacoes[i - 1].cartao) == 0) {
            if (strcmp(transacoes[i].local, transacoes[i - 1].local) != 0) {
                printf("Transa√ß√£o Suspeita: Local Inconsistente - Cart√£o: %s | De: %s Para: %s\n",
                       transacoes[i].cartao, transacoes[i - 1].local, transacoes[i].local);
                suspeito = 1;
            }
        }

        if (!suspeito) {
            printf("Transa√ß√£o Aprovada: Cart√£o: %s | Valor: %.2f\n",
                   transacoes[i].cartao, transacoes[i].valor);
        }
    }
}

int main() {
    Transacao transacoes[MAX_TRANSACOES];
    int total = carregarTransacoes("transacoes.csv", transacoes);

    if (total > 0) {
        detectarFraude(transacoes, total);
    } else {
        printf("Nenhuma transa√ß√£o carregada.\n");
    }

    return 0;
}
